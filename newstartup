#!/usr/bin/env bash




sudo apt-get install mocp -y
sudo apt-get install mplayer -y
sudo apt-get install proxychains -y
sudo apt-get install nmap -y
sudo apt-get install ffmpeg -y


bindir="$HOME/bin"

if [ ! -d ${bindir} ]; then
	mkdir ${bindir}
fi




##getdns
	cat <<EOF > ${bindir}/getdns
#!/usr/bin/env bash
if [ \$# != 0 ]; then
nslookup \$1|grep Address|grep -v 127|awk '{print \$2}'|xargs -I %  sh -c '/home/sow/bin/getip %' 
else
	echo "usage:getdns <domain_name>"
fi
EOF

##getip
#获取制定ip地址的地理位置信息
#或者根据域名来获取地理位置信息
#getip和getdns 是一起使用配合使用的
	cat <<EOF > ${bindir}/getip
#!/usr/bin/env bash
#https://ipgeolocation.io/signup?plan=1 
#achieve a API_KEY can use this script

IP=\`curl -s icanhazip.com\`
if [ \$# == 0 ]; then
	curl -s 'https://api.ipgeolocation.io/ipgeo?apiKey=1fc33c6bc00f44d6a55462f9e2bd094f&ip='+\$IP+'&fields=city,country_name'
else
	curl -s 'https://api.ipgeolocation.io/ipgeo?apiKey=1fc33c6bc00f44d6a55462f9e2bd094f&ip='+\$1+'&fields=city,country_name'
fi
echo
EOF

##sc
#用于局域网的主机扫描
#获取ip地址，mac地址，设备名称

	
	cat <<EOF > ${bindir}/sc
#!/usr/bin/env bash
#scan the network host ip mac and device-name

if [ ! -e /usr/bin/nmap ]; then
	echo "please install nmap first"
	sudo apt-get install nmap
fi


ip=\`ifconfig|grep  -Eo  "([0-9]{1,3}\.){3}"|grep -v ^127|grep -v ^255|uniq\`'0/24'

sudo nmap -sn -PO -PR \${ip} |awk '/^Nmap scan/{IP=\$5};/^MAC/{print IP,"\011",\$3,"\011",\$4,\$5,\$6,\$7};{next}' > /tmp/sc.log
cnt=\`cat /tmp/sc.log|wc -l\`
echo "online host count : \${cnt}"
echo "[ip]		 [mac]			 [device]"
cat /tmp/sc.log
rm /tmp/sc.log
EOF


##mp4t3
#用于提取视频中的音频文件
#你需要安装ffmpeg
	cat <<EOF > ${bindir}/mp4t3
#!/usr/bin/env bash

if [ ! -e /usr/bin/ffmpeg ]; then
	echo "please install ffmpeg first"
	sudo apt-get install ffmpeg 
fi

if [ \$# != 1 ]; then
	echo "usage:mp4t3 [vidoe-file]"
	echo "it can generator same name .mp3 file in the current directory"
	exit -1
fi


if [ \$# == 1 ];then
	fn=\$1
	fn2=\`echo \$fn|awk -F\. '{print \$1}'\`
	ffmpeg -i \$fn -f mp3 -ab 192000 -vn \$fn2.mp3
fi
EOF

##sysinfo
#显示当前的CPU 内存 和 网络链接情况

	cat <<EOF > ${bindir}/sysinfo
#!/usr/bin/env bash
echo "[CPU STATISTICS]"
ps -eo pcpu,pid,user,args|sort  -k1 -r -g|head -10
echo "[MEM STATISTICS]"
ps -eo %mem,pid,user,args|sort  -k1 -r -g|head -10
echo "[Connection STATE]"
ss -tap
EOF

##we
#用于显示当前的天气情况
	cat <<EOF > ${bindir}/we
#!/usr/bin/env bash

clear
curl -s wttr.in/shaoxing?n?3?m?q|grep -v Follow|grep -v feature
EOF

##macspoof
#用于修改mac地址

	cat <<EOF > ${bindir}/macspoof
#!/usr/bin/env bash

if [ ! -e /usr/bin/macchanger ]; then
 	echo "please install macchanger first"
    	sudo apt-get install macchanger
fi


if [ \$# == 1 ] && [ \$1 == '-l' ]; then
   	ifconfig |grep "Link encap"|grep -v lo|awk '{print \$1}'
    	exit 0
fi

if [ \$# != 2 ]; then
    	echo "usage:macspool -l(list available inferface)"
    	echo "usage:macspoof [-m(modify)|-r(resume)] [interface]"
    	exit -1
fi

interface=\$2
state=\$1

if [ \$state == "-m" ]; then
    	sudo ifconfig \$interface down
    	sudo macchanger -A \$interface 
    	sudo ifconfig \$interface up
    	echo "Mac Adress Modified Already!"
    	exit 0
fi


if [ \$state == "-r" ]; then
    	sudo ifconfig \$interface down
    	sudo macchanger -p \$interface
    	sudo ifconfig \$interface up
    	sudo service network-manager restart
    	echo "Mac Address is recovery alreay!"
    	exit 0
fi
EOF

##vs
#管理openvpn脚本
	cat <<EOF > ${bindir}/vs
#!/usr/bin/env bash

if [ ! -d ~/bin/vpncfg ]; then
	mkdir ~/bin/vpncfg
fi


if [ \$# == 0 ]; then
	echo "usage: `basename \$0` -l(list available vpn server)"
	echo "	 eg: `basename \$0` [us,jp,nl]"
	exit -1
fi

if [ \${1} == '-l' ]; then
	ls -1 ~/bin/vpncfg/|awk -F\. '{print \$1}'
	exit -1
fi


sudo openvpn --config ~/bin/vpncfg/\$1.ovpn --http-proxy 67.209.67.231 5555
EOF


##filter-proxy
#用于过滤代理服务器的地址和端口
#https://hidemyna.me/en/proxy-list/


	
	cat <<EOF > ${bindir}/filter-proxy
#!/usr/bin/env bash

if [ \$# == 0 ]; then
	echo "easy to filter proxy web data to plain and clear proxylist"
	echo "usage:filter-proxy -3 filename (http/https filter)"
	echo "     :filter-proxy -4 filename (socks4 filter)"
	echo "     :filter-proxy -5 filename (socks5 filter)"
	exit  -1
fi

tmpfile=\$RANDOM

cat <<BOF >\$tmpfile
random_chain
quiet_mode
proxy_dns
tcp_read_time_out 20000 
tcp_connect_time_out 2000 
[ProxyList]
BOF

if [ \${1} == '-3' ]; then
cat \$2|grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}"|awk '{print "http",\$1,\$2}'>>\$tmpfile 
fi

if [ \${1} == '-4' ]; then
cat \$2|grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}"|awk '{print "socks4",\$1,\$2}'>>\$tmpfile 
fi

if [ \${1} == '-5' ]; then
cat \$2|grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}"|awk '{print "socks5",\$1,\$2}'>>\$tmpfile 
fi

sudo mv \$tmpfile /etc/proxychains.conf
less /etc/proxychains.conf
EOF

##umountall
#卸载所有移动存储器

	cat <<EOF > ${bindir}/umountall
#!/usr/bin/env bash
ls /media/\`whoami\`|xargs -I % sh -c 'umount /media/\`whoami\`/%'
EOF

##dict
#english dictionary

	cat <<EOF > ${bindir}/dict
#!/usr/bin/env bash
while [ TRUE ]
do
	clear
	read -p '>' word
	curl -s dict://dict.org/d:\${word} > /tmp/word.log
	more +5 /tmp/word.log|sed 'N;\$!P;\$!D;\$d'|sed '\$d'|less
done
EOF



cd ${bindir}

chmod 755 getdns getip sc mp4t3 vs filter-proxy macspoof we sysinfo umountall dict
